<?php

namespace App\Services;

use FPDF;
use App\Models\Sale;
use App\Models\Product;
use Carbon\Carbon;

class ReportGenerator
{
    protected $pdf;
    protected $tenantName;
    protected $userFullName;
    protected $userRole;
    protected $reportType;

    public function __construct($tenantName = '', $userFullName = '', $userRole = '', $reportType = 'advance')
    {
        $this->pdf = new FPDF();
        $this->tenantName = $tenantName;
        $this->userFullName = $userFullName;
        $this->userRole = $userRole;
        $this->reportType = $reportType;

        // Add header and footer callbacks
        $this->pdf->SetAutoPageBreak(true, 20);
    }

    // Header
    protected function header()
    {
        $this->pdf->SetFont('Arial', 'B', 16);
        $this->pdf->Cell(0, 10, 'PHARMACURE POS SYSTEM', 0, 1, 'C');

        $this->pdf->SetFont('Arial', 'B', 14);
        $this->pdf->Cell(0, 10, $this->tenantName, 0, 1, 'C');

        $this->pdf->SetFont('Arial', '', 12);
        $this->pdf->Cell(0, 10, $this->tenantName, 0, 1, 'C');

        if (!empty($this->reportType)) {
            $this->pdf->SetFont('Arial', 'B', 14);
            $this->pdf->Cell(0, 10, $this->reportType, 0, 1, 'C');
        }
    }

    // Footer
    protected function footer()
    {
        $this->pdf->Ln(10);
        $this->pdf->SetFont('Arial', 'I', 10);
        $this->pdf->Cell(0, 10, 'Generated by: ' . $this->userFullName . ' (' . $this->userRole . ')', 0, 1, 'L');
        $this->pdf->Cell(0, 10, 'Date: ' . date('Y-m-d H:i:s'), 0, 0, 'L');
    }

    public function generateInvoice($saleId)
    {
        $sale = Sale::with('saleItems.product')->findOrFail($saleId);

        $this->pdf->AddPage('P', 'A4');

        $this->pdf->SetFont('Arial', 'B', 16);
        $this->pdf->Cell(0, 10, 'PHARMACURE POS SYSTEM', 0, 1, 'C');

        $this->pdf->SetFont('Arial', '', 12);
        $this->pdf->Cell(0, 10, $this->tenantName, 0, 1, 'C');

        $this->pdf->SetFont('Arial', 'B', 14);
        $this->pdf->Cell(0, 10, $this->reportType, 0, 1, 'C');

        $this->pdf->Ln(5);

        $this->pdf->SetFont('Arial', 'B', 12);
        $this->pdf->Cell(0, 10, 'SALE ID: ' . $sale->id, 0, 1);

        $this->pdf->Ln(5);

        // Table header
        $this->pdf->SetFont('Arial', 'B', 12);
        $this->pdf->Cell(60, 10, 'Product', 1, 0);
        $this->pdf->Cell(30, 10, 'Quantity', 1, 0, 'C');
        $this->pdf->Cell(40, 10, 'Price', 1, 0, 'R');
        $this->pdf->Cell(40, 10, 'Total', 1, 1, 'R');

        // Table body
        $this->pdf->SetFont('Arial', '', 12);
        $totalAmount = 0;

        foreach ($sale->saleItems as $saleItem) {
            $quantity = $saleItem->quantity;
            $price = $saleItem->price;
            $total = $quantity * $price;
            $totalAmount += $total;

            $this->pdf->Cell(60, 10, $saleItem->product->name, 1, 0);
            $this->pdf->Cell(30, 10, $quantity, 1, 0, 'C');
            $this->pdf->Cell(40, 10, number_format($price, 2), 1, 0, 'R');
            $this->pdf->Cell(40, 10, number_format($total, 2), 1, 1, 'R');
        }

        $this->pdf->Ln(5);

        // Total amount row
        $this->pdf->SetFont('Arial', 'B', 14);
        $this->pdf->Cell(130, 10, 'TOTAL AMOUNT:', 1, 0, 'R');
        $this->pdf->Cell(40, 10, number_format($totalAmount, 2), 1, 1, 'R');

        $this->footer();

        return $this->pdf->Output('S');
    }

    public function generateInvoiceODF($saleId)
    {
        $sale = Sale::with('saleItems.product')->findOrFail($saleId);

        // Basic ODF content generation (flat XML format for simplicity)
        $xml = new \SimpleXMLElement('<?xml version="1.0" encoding="UTF-8"?><office:document-content xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:text="urn:oasis:names:tc:opendocument:xmlns:text:1.0"></office:document-content>');

        $body = $xml->addChild('office:body', null, 'urn:oasis:names:tc:opendocument:xmlns:office:1.0');
        $text = $body->addChild('office:text', null, 'urn:oasis:names:tc:opendocument:xmlns:office:1.0');

        $text->addChild('text:h', 'PHARMACURE POS SYSTEM', 'urn:oasis:names:tc:opendocument:xmlns:text:1.0');
        $text->addChild('text:h', $this->tenantName, 'urn:oasis:names:tc:opendocument:xmlns:text:1.0');
        $text->addChild('text:h', $this->reportType, 'urn:oasis:names:tc:opendocument:xmlns:text:1.0');
        $text->addChild('text:h', 'SALE ID: ' . $sale->id, 'urn:oasis:names:tc:opendocument:xmlns:text:1.0');

        $table = $text->addChild('table:table', null, 'urn:oasis:names:tc:opendocument:xmlns:table:1.0');
        $table->addChild('table:table-column', null, 'urn:oasis:names:tc:opendocument:xmlns:table:1.0');
        $table->addChild('table:table-column', null, 'urn:oasis:names:tc:opendocument:xmlns:table:1.0');
        $table->addChild('table:table-column', null, 'urn:oasis:names:tc:opendocument:xmlns:table:1.0');
        $table->addChild('table:table-column', null, 'urn:oasis:names:tc:opendocument:xmlns:table:1.0');

        $headerRow = $table->addChild('table:table-row', null, 'urn:oasis:names:tc:opendocument:xmlns:table:1.0');
        $headerRow->addChild('table:table-cell', 'Product', 'urn:oasis:names:tc:opendocument:xmlns:table:1.0');
        $headerRow->addChild('table:table-cell', 'Quantity', 'urn:oasis:names:tc:opendocument:xmlns:table:1.0');
        $headerRow->addChild('table:table-cell', 'Price', 'urn:oasis:names:tc:opendocument:xmlns:table:1.0');
        $headerRow->addChild('table:table-cell', 'Total', 'urn:oasis:names:tc:opendocument:xmlns:table:1.0');

        $totalAmount = 0;
        foreach ($sale->saleItems as $saleItem) {
            $quantity = $saleItem->quantity;
            $price = $saleItem->price;
            $total = $quantity * $price;
            $totalAmount += $total;

            $row = $table->addChild('table:table-row', null, 'urn:oasis:names:tc:opendocument:xmlns:table:1.0');
            $row->addChild('table:table-cell', $saleItem->product->name, 'urn:oasis:names:tc:opendocument:xmlns:table:1.0');
            $row->addChild('table:table-cell', (string)$quantity, 'urn:oasis:names:tc:opendocument:xmlns:table:1.0');
            $row->addChild('table:table-cell', number_format($price, 2), 'urn:oasis:names:tc:opendocument:xmlns:table:1.0');
            $row->addChild('table:table-cell', number_format($total, 2), 'urn:oasis:names:tc:opendocument:xmlns:table:1.0');
        }

        $totalRow = $table->addChild('table:table-row', null, 'urn:oasis:names:tc:opendocument:xmlns:table:1.0');
        $totalRow->addChild('table:table-cell', 'TOTAL AMOUNT:', 'urn:oasis:names:tc:opendocument:xmlns:table:1.0');
        $totalRow->addChild('table:table-cell', '', 'urn:oasis:names:tc:opendocument:xmlns:table:1.0');
        $totalRow->addChild('table:table-cell', '', 'urn:oasis:names:tc:opendocument:xmlns:table:1.0');
        $totalRow->addChild('table:table-cell', number_format($totalAmount, 2), 'urn:oasis:names:tc:opendocument:xmlns:table:1.0');

        return $xml->asXML();
    }

    public function generateReport($type, $period = null)
    {
        $this->pdf->AddPage();
        $this->pdf->SetFont('Arial', 'B', 16);
        $this->pdf->Cell(0, 10, ucfirst($type) . ' Report', 0, 1, 'C');

        $this->pdf->SetFont('Arial', '', 12);

        switch ($type) {
            case 'total sales':
                $totalSales = Sale::sum('total_price');
                $this->pdf->Cell(0, 10, 'Total Sales: $' . number_format($totalSales, 2), 0, 1);
                break;

            case 'stock left':
                $products = Product::all();
                foreach ($products as $product) {
                    $this->pdf->Cell(0, 10, $product->name . ': ' . $product->stock_quantity . ' units left', 0, 1);
                }
                break;

            case 'expired products':
                $expiredProducts = Product::where('expiration_date', '<', Carbon::today())->get();
                foreach ($expiredProducts as $product) {
                    $this->pdf->Cell(0, 10, $product->name . ' expired on ' . $product->expiration_date->format('Y-m-d'), 0, 1);
                }
                break;

            case 'most sold':
            case 'least sold':
                $query = Sale::selectRaw('sale_items.product_id, SUM(sale_items.quantity) as total_quantity')
                    ->join('sale_items', 'sales.id', '=', 'sale_items.sale_id')
                    ->groupBy('sale_items.product_id');

                if ($period) {
                    $startDate = $this->getStartDateForPeriod($period);
                    $query->where('sales.created_at', '>=', $startDate);
                }

                $query->orderBy('total_quantity', $type === 'most sold' ? 'desc' : 'asc');

                $results = $query->get();

                foreach ($results as $result) {
                    $product = Product::find($result->product_id);
                    $this->pdf->Cell(0, 10, $product->name . ': ' . $result->total_quantity . ' units sold', 0, 1);
                }
                break;

            default:
                $this->pdf->Cell(0, 10, 'Report type not supported.', 0, 1);
                break;
        }

        return $this->pdf->Output('S');
    }

    protected function getStartDateForPeriod($period)
    {
        switch ($period) {
            case 'day':
                return Carbon::today();
            case 'week':
                return Carbon::now()->startOfWeek();
            case 'month':
                return Carbon::now()->startOfMonth();
            case 'year':
                return Carbon::now()->startOfYear();
            default:
                return null;
        }
    }
}
